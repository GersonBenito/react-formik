{"version":3,"sources":["components/boton/Boton.js","components/formularios/FormularioFormik.js","helper/Validaciones.js","components/formularios/FormularioYup.js","container/HomePage.js","container/NotFound.js","routes/App.js","index.js"],"names":["Container","styled","div","Boton","name","type","estilo","icon","accion","evento","className","onClick","FormularioFormik","history","useHistory","gotoHome","push","initialValues","username","email","pais","direccion","validate","genero","errores","test","onSubmit","values","resetForm","console","log","sendForm","errors","component","as","value","RedoOutlined","SaveOutlined","validateSitioWeb","error","FormularioYup","validator","yup","shape","nombres","required","apellidos","edad","integer","positive","sitioWeb","password","min","max","confirmarPassword","oneOf","goToHome","validationSchema","handleSubmit","touched","HomePage","useState","description","image","ruta","formulario","map","item","index","src","alt","FileSearchOutlined","NotFound","status","title","subTitle","extra","ArrowLeftOutlined","App","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yNA6BMA,EAAYC,IAAOC,IAAV,8EAMAC,EAxBD,SAAC,GAAgD,IAA/CC,EAA8C,EAA9CA,KAAMC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,OAAQC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,OAEtC,OAF0D,EAAZC,QAI1C,IAAK,UAIL,IAAK,WAIL,QAEI,OAAQ,cAACT,EAAD,UAAW,yBAAQK,KAAMA,EAAMK,UAAS,kBAAaJ,GAAUK,QAASH,EAA7D,UAAuED,EAAvE,OAAmFH,S,mCCgJ5GJ,EAAYC,IAAOC,IAAV,ylBA6BAU,EA7LU,WAErB,IAAMC,EAAUC,cAUVC,EAAW,WACbF,EAAQG,KAAK,MAgDjB,OACI,eAAC,EAAD,WACI,qBAAKN,UAAU,SAAf,SACI,mBAAGA,UAAU,YAAb,qCAEJ,qBAAKA,UAAU,iBAAf,SAEI,cAAC,IAAD,CACIO,cAjEM,CAClBC,SAAU,GACVC,MAAO,GACPC,KAAM,GACNC,UAAW,IA8DCC,SA/CE,SAAC,GAAiD,IAA/CJ,EAA8C,EAA9CA,SAAUC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,KAAcC,GAAe,EAAvBE,OAAuB,EAAfF,WAE5CG,EAAU,GAiCd,OA9BIN,EAIM,8BAAwBO,KAAKP,KAEnCM,EAAQN,SAAW,mDAJnBM,EAAQN,SAAW,4BAQnBC,EAIM,mDAAmDM,KAAKN,KAE9DK,EAAQL,MAAQ,+BAJhBK,EAAQL,MAAQ,2BAShBC,IACAI,EAAQJ,KAAO,2BAIfC,IACAG,EAAQH,UAAY,gCAGjBG,GAaKE,SAAW,SAACC,EAAD,UAtDV,SAACA,EAAQC,GACtBC,QAAQC,IAAI,qBAAqBH,GACjCC,IAoDiDG,CAASJ,EAAnC,EAAWC,YAH1B,SAMQ,gBAAGI,EAAH,EAAGA,OAAH,OAEI,eAAC,IAAD,WACI,sBAAKtB,UAAU,aAAf,UAEI,gCACI,sDACA,cAAC,IAAD,CACIL,KAAK,OACLD,KAAK,WACLM,UAAU,iBAEd,cAAC,IAAD,CACIN,KAAK,WACL6B,UAAW,kBAAK,mBAAGvB,UAAU,cAAb,SAA4BsB,EAAOd,iBAI3D,gCACI,2CACA,cAAC,IAAD,CACIb,KAAK,OACLD,KAAK,QACLM,UAAU,iBAEd,cAAC,IAAD,CACIN,KAAK,QACL6B,UAAW,kBAAK,mBAAGvB,UAAU,cAAb,SAA4BsB,EAAOb,cAI3D,gCACI,yCACA,eAAC,IAAD,CAAOf,KAAK,OAAO8B,GAAG,SAASxB,UAAU,eAAzC,UACI,wBAAQyB,MAAM,cAAd,yBACA,wBAAQA,MAAM,iBAAd,4BACA,wBAAQA,MAAM,SAAd,uBAEJ,cAAC,IAAD,CACI/B,KAAK,OACL6B,UAAW,kBAAM,mBAAGvB,UAAU,cAAb,SAA6BsB,EAAOZ,aAI7D,gCAEI,8CACA,cAAC,IAAD,CAAOhB,KAAK,YAAY8B,GAAG,WAAWxB,UAAU,iBAChD,cAAC,IAAD,CACIN,KAAK,YACL6B,UAAW,kBAAM,mBAAGvB,UAAU,cAAb,SAA4BsB,EAAOX,qBAOhE,qBAAKX,UAAU,aAAf,SACI,eAAC,IAAD,WACI,cAAC,EAAD,CACIN,KAAK,WACLC,KAAK,SACLC,OAAO,kBACPG,OAAO,UACPD,OAASO,EACTR,KAAO,cAAC6B,EAAA,EAAD,MAEX,cAAC,EAAD,CACIhC,KAAK,SACLC,KAAK,SACLC,OAAO,eACPC,KAAO,cAAC8B,EAAA,EAAD,uB,QCxJtCC,EAAmB,SAACH,GAC7B,IAAII,EAAQ,GAMZ,MALY,gCACFd,KAAKU,KACXI,EAAQ,8CAGLA,GCyKLvC,EAAYC,IAAOC,IAAV,2aAuBAsC,EA5LO,WAElB,IAAM3B,EAAUC,cAyBV2B,EAAYC,MAAaC,MAAM,CACjCC,QAASF,MAAaG,SAAS,4BAC/BC,UAAWJ,MAAaG,SAAS,gCACjC1B,MAAOuB,MAAavB,MAAM,iCAAiC0B,SAAS,4BACpEE,KAAML,MAAaG,SAAS,2BAA2BG,QAAQ,wCAAwCC,SAAS,4CAChHC,SAAUR,MACVS,SAAUT,MACGU,IAAI,EAAE,uBACNC,IAAI,EAAE,uBACNR,SAAS,mCACtBS,kBAAmBZ,MAAaa,MAAM,CAACb,IAAQ,YAAa,MAAO,qCAWjEc,EAAW,WACb3C,EAAQG,KAAK,MAGjB,OACI,eAAC,EAAD,WAEI,qBAAKN,UAAU,SAAf,SACI,mBAAGA,UAAU,YAAb,2CAGJ,qBAAKA,UAAU,iBAAf,SAEI,cAAC,IAAD,CACIO,cAhDM,CAClB2B,QAAQ,GACRE,UAAW,GACX3B,MAAO,GACP4B,KAAM,GACNG,SAAU,GACVC,SAAU,GACVG,kBAAmB,IA0CPG,iBAAkBhB,EAClBf,SAAU,SAACC,EAAD,UAtBL,SAACA,EAAQC,GAC1BC,QAAQC,IAAIH,GACZC,IAoB+C8B,CAAa/B,EAAtC,EAAWC,YAHzB,SAMQ,gBAAGI,EAAH,EAAGA,OAAQ2B,EAAX,EAAWA,QAAX,OAEI,eAAC,IAAD,WACI,sBAAKjD,UAAU,aAAf,UACI,sBAAKA,UAAU,UAAf,UAEI,4CACA,cAAC,IAAD,CAAOA,UAAU,eAAeN,KAAK,UAAUC,KAAK,SAEhD2B,EAAOY,SAAWe,EAAQf,SAAY,mBAAGlC,UAAU,cAAb,SAA6BsB,EAAOY,aAIlF,sBAAKlC,UAAU,YAAf,UAEI,8CACA,cAAC,IAAD,CAAOA,UAAU,eAAeN,KAAK,YAAYC,KAAK,SAElD2B,EAAOc,WAAaa,EAAQb,WAAc,mBAAGpC,UAAU,cAAb,SAA4BsB,EAAOc,eAIrF,sBAAKpC,UAAU,QAAf,UAEI,0CACA,cAAC,IAAD,CAAOA,UAAU,eAAeN,KAAK,QAAQC,KAAK,SAE9C2B,EAAOb,OAASwC,EAAQxC,OAAU,mBAAGT,UAAU,cAAb,SAA4BsB,EAAOb,WAI7E,sBAAKT,UAAU,OAAf,UAEI,yCACA,cAAC,IAAD,CAAOA,UAAU,eAAeN,KAAK,OAAOC,KAAK,WAE7C2B,EAAOe,MAAQY,EAAQZ,MAAS,mBAAGrC,UAAU,cAAb,SAA4BsB,EAAOe,UAK3E,sBAAKrC,UAAU,WAAf,UAEI,8CACA,cAAC,IAAD,CAAOA,UAAU,eAAeN,KAAK,WAAWC,KAAK,OAAOiB,SAAUgB,IAElEN,EAAOkB,UAAYS,EAAQT,UAAa,mBAAGxC,UAAU,cAAb,SAA4BsB,EAAOkB,cAInF,sBAAKxC,UAAU,WAAf,UAEI,kDACA,cAAC,IAAD,CAAOA,UAAU,eAAeN,KAAK,WAAWC,KAAK,aAEjD2B,EAAOmB,UAAYQ,EAAQR,UAAa,mBAAGzC,UAAU,cAAb,SAA4BsB,EAAOmB,cAInF,sBAAKzC,UAAU,UAAf,UAEI,4DACA,cAAC,IAAD,CAAOA,UAAU,eAAeN,KAAK,oBAAoBC,KAAK,aAE1D2B,EAAOsB,mBAAqBK,EAAQL,mBAAsB,mBAAG5C,UAAU,cAAb,SAA4BsB,EAAOsB,0BAKzG,qBAAK5C,UAAU,aAAf,SACI,eAAC,IAAD,WACI,cAAC,EAAD,CACIN,KAAK,SACLC,KAAK,SACLC,OAAO,UACPG,OAAO,UACPD,OAAQgD,EACRjD,KAAO,cAAC6B,EAAA,EAAD,MAEX,cAAC,EAAD,CACIhC,KAAK,SACLC,KAAK,SACLC,OAAO,OACPC,KAAO,cAAC8B,EAAA,EAAD,uB,yBC5F7CrC,EAAYC,IAAOC,IAAV,iXAmBA0D,EAlFE,WAEb,MAAsCC,mBAClC,CACI,CACIzD,KAAM,oBACN0D,YAAc,6YACdC,MAAO,gEACPC,KAAM,WAEV,CACI5D,KAAM,iBACN0D,YAAc,oWACdC,MAAO,sDACPC,KAAM,UAZlB,mBAAQC,EAAR,KAkBMpD,GAlBN,KAkBgBC,eAMhB,OACI,eAAC,EAAD,WAEI,qBAAKJ,UAAU,SAAf,SACI,mBAAGA,UAAU,YAAb,6BAGJ,qBAAKA,UAAU,iBAAf,SAGQuD,GAAcA,EAAWC,KAAI,SAACC,EAAMC,GAAP,OAEzB,sBAAK1D,UAAU,OAAf,UACI,cAAC,IAAD,CAAO2D,IAAMF,EAAKJ,MAAQrD,UAAU,eAAe4D,IAAI,WACvD,sBAAK5D,UAAU,YAAf,UACI,oBAAIA,UAAU,aAAd,SAA6ByD,EAAK/D,OAClC,mBAAGM,UAAU,YAAb,SAA2ByD,EAAKL,iBAEpC,cAAC,EAAD,CACI1D,KAAK,iBACLC,KAAK,SACLC,OAAO,iBACPG,OAAO,UACPD,OAAQ,kBA3BlBwD,EA2BiCG,EAAKH,UA1BpDnD,EAAQG,KAAKgD,GADA,IAACA,GA4BUzD,KAAO,cAACgE,EAAA,EAAD,QAZYH,Y,kBCV7CpE,EAAYC,IAAOC,IAAV,0SAgBAsE,EA5CE,WAEb,IAAM3D,EAAUC,cAKhB,OACI,cAAC,EAAD,UACI,cAAC,IAAD,CACI2D,OAAO,MACPC,MAAM,MACNC,SAAS,iDACTC,MACI,cAAC,EAAD,CACIxE,KAAK,WACLC,KAAK,SACLC,OAAO,SACPG,OAAO,UACPD,OAfH,WACbK,EAAQG,KAAK,MAeGT,KAAO,cAACsE,EAAA,EAAD,WCNhBC,MAdf,WAEE,OACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAI/C,UAAW2B,IACjC,cAAC,IAAD,CAAOmB,OAAK,EAACC,KAAK,UAAU/C,UAAWrB,IACvC,cAAC,IAAD,CAAOmE,OAAK,EAACC,KAAK,OAAO/C,UAAWO,IACpC,cAAC,IAAD,CAAOP,UAAWuC,UCZ1BS,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ca12afa2.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\n/**\r\n * @param {*} name nombre del boton\r\n * @param {*} type tipo del boton submit o button\r\n * @param {*} estilo color que tendra el boton success, warning, danger, etc\r\n * @param {*} icon icono representativo del boton\r\n * @param {*} evento tipo de evento que tendra, ejemplo onClick, onChange, etc\r\n * @param {*} accion funcion que realizara en el evento\r\n */\r\nconst Boton = ({name, type, estilo, icon, accion, evento}) => {\r\n\r\n    switch (evento) {\r\n\r\n        case 'onClick':\r\n            \r\n            return (<Container><button type={type} className={`btn btn-${estilo}`} onClick={accion} >{icon}&nbsp;{name}</button></Container>);\r\n\r\n        case 'onChange':\r\n\r\n            return (<Container><button type={type} className={`btn btn-${estilo}`} onClick={accion} >{icon}&nbsp;{name}</button></Container>);\r\n    \r\n        default:\r\n\r\n            return (<Container><button type={type} className={`btn btn-${estilo}`} onClick={accion} >{icon}&nbsp;{name}</button></Container>);\r\n    }\r\n}\r\n\r\nconst Container = styled.div`\r\n    .anticon svg{\r\n        display: flex;\r\n    }\r\n`;\r\n\r\nexport default Boton\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport Boton from '../boton/Boton';\r\nimport { useHistory } from 'react-router';\r\nimport { Space }from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport { RedoOutlined, SaveOutlined }from '@ant-design/icons';\r\n\r\nconst FormularioFormik = () => {\r\n\r\n    const history = useHistory();\r\n    \r\n    const initialValues = {\r\n        username: '',\r\n        email: '',\r\n        pais: '',\r\n        direccion: '',\r\n    }\r\n\r\n    //regresar al home\r\n    const gotoHome = () =>{\r\n        history.push('/');\r\n    }\r\n\r\n    //enviar datos\r\n    const sendForm = (values, resetForm) =>{\r\n        console.log('formulario enviado',values);\r\n        resetForm();\r\n    }\r\n\r\n    //validaciones del formulario\r\n    const validator = ({ username, email, pais, genero, direccion }) =>{\r\n\r\n        let errores = {};\r\n\r\n        //validar nombre de usuario\r\n        if(!username){\r\n\r\n            errores.username = 'Campo nombre es requerido';\r\n\r\n        }else if(!/^[a-zA-ZÀ-ÿ\\s]{1,40}$/.test(username)){\r\n\r\n            errores.username = 'El nombre solo puede contener letras y espacios';\r\n        }\r\n\r\n        //validar correo\r\n        if(!email){\r\n\r\n            errores.email = 'Campo email es requerido';\r\n\r\n        }else if(!/^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$/.test(email)){\r\n\r\n            errores.email = 'Email ingresa es incorrecto';\r\n\r\n        }\r\n\r\n        //validar pais\r\n        if(!pais){\r\n            errores.pais = 'Campo pais es requerido';\r\n        }\r\n\r\n        //validar direccion \r\n        if(!direccion){\r\n            errores.direccion = 'Campo direccion es requerido';\r\n        }\r\n\r\n        return errores;\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"titulo\">\r\n                <p className='text-info' >Formulario con Formik</p>\r\n            </div>\r\n            <div className=\"contenedorForm\">\r\n\r\n                <Formik\r\n                    initialValues={ initialValues }\r\n                    validate={ validator }\r\n                    onSubmit={ (values, { resetForm }) =>sendForm(values, resetForm) }\r\n                >\r\n                    {\r\n                        ({ errors }) =>(\r\n\r\n                            <Form>\r\n                                <div className=\"contenedor\">\r\n\r\n                                    <div>\r\n                                        <label>Nombre de usuario</label>\r\n                                        <Field \r\n                                            type='text'\r\n                                            name='username'\r\n                                            className='form-control'\r\n                                        />\r\n                                        <ErrorMessage\r\n                                            name='username'\r\n                                            component={()=>(<p className='text-danger'>{errors.username}</p>)}\r\n                                        />\r\n                                    </div>\r\n\r\n                                    <div>\r\n                                        <label>Correo</label>\r\n                                        <Field \r\n                                            type='text'\r\n                                            name='email'\r\n                                            className='form-control'\r\n                                        />\r\n                                        <ErrorMessage \r\n                                            name='email' \r\n                                            component={()=>(<p className='text-danger'>{errors.email}</p>)}\r\n                                        />\r\n                                    </div>\r\n\r\n                                    <div>\r\n                                        <label>Pais</label>\r\n                                        <Field name='pais' as='select' className='form-control' >\r\n                                            <option value=\"El Salvador\">El Salvador</option>\r\n                                            <option value=\"Estados Unidos\">Estados Unidos</option>\r\n                                            <option value=\"Mexico\">Mexico</option>\r\n                                        </Field>\r\n                                        <ErrorMessage \r\n                                            name='pais'\r\n                                            component={()=>( <p className='text-danger' >{errors.pais}</p> )}\r\n                                        />\r\n                                    </div>\r\n\r\n                                    <div>\r\n\r\n                                        <label>Direccion</label>\r\n                                        <Field name='direccion' as='textarea' className='form-control' />\r\n                                        <ErrorMessage \r\n                                            name='direccion'\r\n                                            component={()=>( <p className='text-danger'>{errors.direccion}</p> )}\r\n                                        />\r\n\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n                                <div className=\"boton mt-3\">\r\n                                    <Space>\r\n                                        <Boton \r\n                                            name='Regresar' \r\n                                            type='button' \r\n                                            estilo='outline-warning' \r\n                                            evento='onClick' \r\n                                            accion={ gotoHome }\r\n                                            icon={ <RedoOutlined /> } \r\n                                        />\r\n                                        <Boton \r\n                                            name='Enviar' \r\n                                            type='submit' \r\n                                            estilo='outline-info' \r\n                                            icon={ <SaveOutlined /> } \r\n                                        />\r\n                                    </Space>\r\n\r\n                                </div>\r\n                            </Form>\r\n                        )\r\n                    }\r\n                </Formik>\r\n\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst Container = styled.div`\r\n    .titulo{\r\n        text-align: center;\r\n    }\r\n    .titulo > p{\r\n        margin: 0;\r\n        font-family: fantasy;\r\n        font-size: 35px;\r\n    }\r\n\r\n    .boton{\r\n        display: flex;\r\n        justify-content: center;\r\n    }\r\n\r\n    .contenedor{\r\n        display: grid;\r\n        grid-template-columns: repeat(auto-fit, 30rem);\r\n        justify-content: center;\r\n        grid-gap: 10px;\r\n    }\r\n\r\n    @media screen and (max-width: 768px) and (orientation: portrait){\r\n        .contenedor{\r\n            grid-template-columns: repeat(auto-fit, 18rem);\r\n        }\r\n    }\r\n`;\r\n\r\nexport default FormularioFormik\r\n","\r\n//validar formato de sitio web\r\nexport const validateSitioWeb = (value) =>{\r\n    let error = '';\r\n    let regex = /^(ftp|http|https):\\/\\/[^ \"]+$/;\r\n    if(!regex.test(value)){\r\n        error = 'la direccion de su sitio web es incorrecto'\r\n    }\r\n\r\n    return error;\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport * as yup from 'yup';  \r\nimport { validateSitioWeb } from '../../helper/Validaciones';\r\nimport Boton from '../boton/Boton';\r\nimport { useHistory } from 'react-router';\r\nimport { Space }from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport { RedoOutlined, SaveOutlined }from '@ant-design/icons';\r\n\r\n\r\n\r\nconst FormularioYup = () => {\r\n\r\n    const history = useHistory();\r\n    //simulacion de datos dinamicos, cuando sean datos de una base no sera necesarios estos datos\r\n    const dataEdit = {\r\n        nombres:'Gerson',\r\n        apellidos: 'Benito',\r\n        email: 'gersonbenito4@gmail.com',\r\n        edad: 22,\r\n        sitioWeb: 'www.sitio.com',\r\n        password: 'qwert',\r\n        confirmarPassword: 'qwert',\r\n    }\r\n\r\n    const initialValues = {\r\n        nombres:'',\r\n        apellidos: '',\r\n        email: '',\r\n        edad: '',\r\n        sitioWeb: '',\r\n        password: '',\r\n        confirmarPassword: '',\r\n    }\r\n\r\n    //cambiar cuando sean datos reales y dinamicos de una base de datos\r\n    const accion = 'add';\r\n\r\n    const validator = yup.object().shape({\r\n        nombres: yup.string().required('Campo nombres es requido'),\r\n        apellidos: yup.string().required('Campo apellidos es requerido'),\r\n        email: yup.string().email('Correo ingresado no es valido').required('Campo email es requerido'),\r\n        edad: yup.number().required('Campo edad es requerido').integer('La edad debe de ser un numero entero').positive('La edad debe de tener un numero positivo'),\r\n        sitioWeb: yup.string(),\r\n        password: yup.string()\r\n                    .min(4,'4 caracteres minimo')\r\n                    .max(8,'8 caracteres maximo')\r\n                    .required('Campo contraseña es requrido'),\r\n        confirmarPassword: yup.string().oneOf([yup.ref('password'), null], 'Las contraseñas no coinciden'),\r\n    })\r\n\r\n\r\n\r\n    const handleSubmit = (values, resetForm) =>{\r\n        console.log(values);\r\n        resetForm();\r\n    }\r\n\r\n\r\n    const goToHome = () =>{\r\n        history.push('/');\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n\r\n            <div className=\"titulo\">\r\n                <p className='text-info'>Formulario con Formik y Yup</p>\r\n            </div>\r\n\r\n            <div className=\"contenedorForm\">\r\n\r\n                <Formik\r\n                    initialValues={accion === 'edit' ? dataEdit : initialValues}\r\n                    validationSchema={validator}\r\n                    onSubmit={(values, { resetForm })=>handleSubmit(values, resetForm)}\r\n                >\r\n                    {\r\n                        ({ errors, touched }) =>(\r\n\r\n                            <Form>\r\n                                <div className=\"contenedor\">\r\n                                    <div className=\"nombres\">\r\n\r\n                                        <label>Nombres</label>\r\n                                        <Field className='form-control' name='nombres' type='text' />\r\n                                        {\r\n                                            errors.nombres && touched.nombres && (<p className='text-danger' >{errors.nombres}</p>)\r\n                                        }\r\n\r\n                                    </div>\r\n                                    <div className=\"apellidos\">\r\n\r\n                                        <label>Apellidos</label>\r\n                                        <Field className='form-control' name='apellidos' type='text' />\r\n                                        {\r\n                                            errors.apellidos && touched.apellidos && (<p className='text-danger'>{errors.apellidos}</p>)\r\n                                        }\r\n\r\n                                    </div>\r\n                                    <div className=\"email\">\r\n\r\n                                        <label>Eamil</label>\r\n                                        <Field className='form-control' name='email' type='text' />\r\n                                        {\r\n                                            errors.email && touched.email && (<p className='text-danger'>{errors.email}</p>)\r\n                                        }\r\n\r\n                                    </div>\r\n                                    <div className=\"edad\">\r\n\r\n                                        <label>Edad</label>\r\n                                        <Field className='form-control' name='edad' type='number' />\r\n                                        {\r\n                                            errors.edad && touched.edad && (<p className='text-danger'>{errors.edad}</p>)\r\n                                        }\r\n\r\n                                    </div>\r\n\r\n                                    <div className=\"sitioWeb\">\r\n\r\n                                        <label>Sitio web</label>\r\n                                        <Field className='form-control' name='sitioWeb' type='text' validate={validateSitioWeb} />\r\n                                        {\r\n                                            errors.sitioWeb && touched.sitioWeb && (<p className='text-danger'>{errors.sitioWeb}</p>)\r\n                                        }\r\n\r\n                                    </div>\r\n                                    <div className=\"password\">\r\n\r\n                                        <label>Contraseña</label>\r\n                                        <Field className='form-control' name='password' type='password' />\r\n                                        {\r\n                                            errors.password && touched.password && (<p className='text-danger'>{errors.password}</p>)\r\n                                        }\r\n\r\n                                    </div>\r\n                                    <div className=\"confirm\">\r\n\r\n                                        <label>Confirmar contraseña</label>\r\n                                        <Field className='form-control' name='confirmarPassword' type='password' />\r\n                                        {\r\n                                            errors.confirmarPassword && touched.confirmarPassword && (<p className='text-danger'>{errors.confirmarPassword}</p>)\r\n                                        }\r\n\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"boton mt-3\">\r\n                                    <Space>\r\n                                        <Boton \r\n                                            name='Volver' \r\n                                            type='button'\r\n                                            estilo='warning' \r\n                                            evento='onClick' \r\n                                            accion={goToHome}\r\n                                            icon={ <RedoOutlined /> } \r\n                                        />\r\n                                        <Boton \r\n                                            name='enviar' \r\n                                            type='Submit'\r\n                                            estilo='info' \r\n                                            icon={ <SaveOutlined /> } \r\n                                        />\r\n                                    </Space>   \r\n                                </div>\r\n                            </Form>\r\n                        )\r\n                    }\r\n\r\n                </Formik>\r\n\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst Container = styled.div`\r\n    .contenedor{\r\n        display: grid;\r\n        grid-template-columns: repeat(auto-fit, 20rem);\r\n        grid-gap: 10px;\r\n        justify-content: center;\r\n    }\r\n\r\n    .boton{\r\n        display: flex;\r\n        justify-content: center;\r\n    }\r\n\r\n    .titulo{\r\n        text-align: center;\r\n    }\r\n    .titulo > p{\r\n        margin: 0;\r\n        font-family: fantasy;\r\n        font-size: 35px;\r\n    }\r\n`;\r\n\r\nexport default FormularioYup\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Image }from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport Boton from '../components/boton/Boton';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { FileSearchOutlined }from '@ant-design/icons';\r\n\r\nconst HomePage = () => {\r\n\r\n    const [ formulario, setFormulario ] = useState(\r\n        [\r\n            {\r\n                name: 'Formulario Formik',\r\n                description:  'Formik es una librería declarativa, intuitiva y adaptable desarrollada por Jared Palmer. Es muy fácil de utilizar y, gracias a su reducido peso (tan solo 12.7 kB), es perfecta para nuestras aplicaciones. Gracias a ella, al desarrollar nuestros formularios, conseguiremos:Obtener los valores dentro y fuera del State del formulario.Validación y mensajes de error. Controlar el envío.',\r\n                image: 'https://miro.medium.com/max/1400/1*c1V37mc6XxLectWfolqwoA.png',\r\n                ruta: '/formik'\r\n            },\r\n            {\r\n                name: 'Formulario Yup',\r\n                description:  'Yup es la librería perfecta para validar los campos de Formik, y es tanto así que el equipo de Formik adora Yup que creo un accesorio o props especifico para Yup llamado validationSchema que transforma los errores en objetos y coincide con sus valores y funciones tocadas. Un esquema de Yup es un objeto inmutable responsable de validar un objeto.',\r\n                image: 'https://thumbs.dreamstime.com/b/print-145848581.jpg',\r\n                ruta: '/yup'\r\n            },\r\n    \r\n        ]\r\n    );\r\n\r\n    const history = useHistory();\r\n\r\n    const goToForm = (ruta) =>{\r\n        history.push(ruta);\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n\r\n            <div className=\"titulo\">\r\n                <p className='text-info'>Uso de formik</p>\r\n            </div>\r\n\r\n            <div className=\"contenedorCard\">\r\n\r\n                {\r\n                    formulario && formulario.map((item, index) =>(\r\n\r\n                        <div className=\"card\" key={index} >\r\n                            <Image src={ item.image } className='card-img-top' alt='imagen' />\r\n                            <div className=\"card-body\">\r\n                                <h5 className=\"card-title\">{ item.name }</h5>\r\n                                <p className=\"card-text\">{ item.description }</p>\r\n                            </div>\r\n                            <Boton \r\n                                name='Ver formulario' \r\n                                type='button' \r\n                                estilo='info btn-block' \r\n                                evento='onClick' \r\n                                accion={() => goToForm(item.ruta)} \r\n                                icon={ <FileSearchOutlined /> }\r\n                            />\r\n                        </div>\r\n\r\n                    ))\r\n                }\r\n\r\n            </div>\r\n\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst Container = styled.div`\r\n    padding: 5px;\r\n    .titulo{\r\n        text-align: center;\r\n    }\r\n    .titulo > p{\r\n        margin: 0;\r\n        font-family: fantasy;\r\n        font-size: 35px;\r\n    }\r\n\r\n    .contenedorCard{\r\n        display: grid;\r\n        grid-template-columns: repeat(auto-fit,18rem);\r\n        grid-gap: 10px;\r\n        justify-content: center;\r\n    }\r\n`;\r\n\r\nexport default HomePage\r\n","import React from 'react';\r\nimport { Result } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport styled from 'styled-components';\r\nimport Boton from '../components/boton/Boton';\r\nimport { useHistory }from 'react-router-dom';\r\nimport { ArrowLeftOutlined }from '@ant-design/icons';\r\n\r\nconst NotFound = () => {\r\n\r\n    const history = useHistory();\r\n\r\n    const backHome = () =>{\r\n        history.push('/');\r\n    }\r\n    return (\r\n        <Container>\r\n            <Result\r\n                status='404'\r\n                title='404'\r\n                subTitle='Oooops!, la pagina no se encuentra disponible.'\r\n                extra={ \r\n                    <Boton \r\n                        name='Regresar' \r\n                        type='button' \r\n                        estilo='danger' \r\n                        evento='onClick' \r\n                        accion={ backHome } \r\n                        icon={ <ArrowLeftOutlined /> }\r\n                    /> \r\n                }\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst Container = styled.div`\r\n    background: #000000;\r\n    height: 100vh;\r\n    .ant-result-title{\r\n        color: #dc3545;\r\n        font-size: 75px;\r\n        font-weight: 700;\r\n    }\r\n\r\n    .ant-result-subtitle{\r\n        color: #dc3545;\r\n        font-size: 45px;\r\n        font-weight: 600; \r\n    }\r\n`;\r\n\r\nexport default NotFound\r\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport FormularioFormik from '../components/formularios/FormularioFormik';\nimport FormularioYup from '../components/formularios/FormularioYup';\nimport HomePage from '../container/HomePage';\nimport NotFound from '../container/NotFound';\n\n\nfunction App() {\n  \n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path='/' component={HomePage} />\n        <Route exact path='/formik' component={FormularioFormik} />\n        <Route exact path='/yup' component={FormularioYup} />\n        <Route component={NotFound} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './routes/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}